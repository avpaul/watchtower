// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Add Manager Modal renders correctly 1`] = `
<GenericModal
  footer={null}
  handleClose={[Function]}
  handleSubmit={[Function]}
  id="addManagerModal"
  submitLoading={false}
  success={false}
  successMessage="This team manager has been added to the project form!"
  title="Add Team Manager"
>
  <TextInput
    alertText=""
    className="wt-text-input"
    comment=""
    componentStateKey="inputs"
    defaultStatus={0}
    inputValue=""
    label="Name"
    length={999}
    name="managerName"
    parent={
      AddManagerModal {
        "context": Object {},
        "handleClick": [Function],
        "handleClose": [Function],
        "props": Object {
          "addProjectManager": [MockFunction],
          "fetchProjectManagers": Object {
            "data": Array [
              Object {
                "email": "johndoe@andela.com",
                "id": 1,
                "name": "John Doe",
              },
            ],
            "error": null,
            "loading": false,
          },
        },
        "refs": Object {},
        "renderModalBody": [Function],
        "renderTextInput": [Function],
        "setState": [Function],
        "state": Object {
          "inputs": Object {},
        },
        "updater": Updater {
          "_callbacks": Array [],
          "_renderer": ReactShallowRenderer {
            "_context": Object {},
            "_didScheduleRenderPhaseUpdate": false,
            "_dispatcher": Object {
              "readContext": [Function],
              "useCallback": [Function],
              "useContext": [Function],
              "useDebugValue": [Function],
              "useEffect": [Function],
              "useImperativeHandle": [Function],
              "useLayoutEffect": [Function],
              "useMemo": [Function],
              "useReducer": [Function],
              "useRef": [Function],
              "useState": [Function],
            },
            "_element": <AddManagerModal
              addProjectManager={[MockFunction]}
              fetchProjectManagers={
                Object {
                  "data": Array [
                    Object {
                      "email": "johndoe@andela.com",
                      "id": 1,
                      "name": "John Doe",
                    },
                  ],
                  "error": null,
                  "loading": false,
                }
              }
            />,
            "_firstWorkInProgressHook": null,
            "_forcedUpdate": false,
            "_instance": [Circular],
            "_isReRender": false,
            "_newState": null,
            "_numberOfReRenders": 0,
            "_renderPhaseUpdates": null,
            "_rendered": <GenericModal
              footer={null}
              handleClose={[Function]}
              handleSubmit={[Function]}
              id="addManagerModal"
              submitLoading={false}
              success={false}
              successMessage="This team manager has been added to the project form!"
              title="Add Team Manager"
            >
              <React.Fragment>
                <TextInput
                  alertText=""
                  className="wt-text-input"
                  comment=""
                  componentStateKey="inputs"
                  defaultStatus={0}
                  inputValue=""
                  label="Name"
                  length={999}
                  name="managerName"
                  parent={[Circular]}
                  placeholder=""
                  testInput={[Function]}
                  type="text"
                />
                <TextInput
                  alertText=""
                  className="wt-text-input"
                  comment=""
                  componentStateKey="inputs"
                  defaultStatus={0}
                  inputValue=""
                  label="Email"
                  length={999}
                  name="managerEmail"
                  parent={[Circular]}
                  placeholder=""
                  testInput={[Function]}
                  type="text"
                />
              </React.Fragment>
            </GenericModal>,
            "_rendering": false,
            "_updater": [Circular],
            "_workInProgressHook": null,
          },
        },
      }
    }
    placeholder=""
    testInput={[Function]}
    type="text"
  />
  <TextInput
    alertText=""
    className="wt-text-input"
    comment=""
    componentStateKey="inputs"
    defaultStatus={0}
    inputValue=""
    label="Email"
    length={999}
    name="managerEmail"
    parent={
      AddManagerModal {
        "context": Object {},
        "handleClick": [Function],
        "handleClose": [Function],
        "props": Object {
          "addProjectManager": [MockFunction],
          "fetchProjectManagers": Object {
            "data": Array [
              Object {
                "email": "johndoe@andela.com",
                "id": 1,
                "name": "John Doe",
              },
            ],
            "error": null,
            "loading": false,
          },
        },
        "refs": Object {},
        "renderModalBody": [Function],
        "renderTextInput": [Function],
        "setState": [Function],
        "state": Object {
          "inputs": Object {},
        },
        "updater": Updater {
          "_callbacks": Array [],
          "_renderer": ReactShallowRenderer {
            "_context": Object {},
            "_didScheduleRenderPhaseUpdate": false,
            "_dispatcher": Object {
              "readContext": [Function],
              "useCallback": [Function],
              "useContext": [Function],
              "useDebugValue": [Function],
              "useEffect": [Function],
              "useImperativeHandle": [Function],
              "useLayoutEffect": [Function],
              "useMemo": [Function],
              "useReducer": [Function],
              "useRef": [Function],
              "useState": [Function],
            },
            "_element": <AddManagerModal
              addProjectManager={[MockFunction]}
              fetchProjectManagers={
                Object {
                  "data": Array [
                    Object {
                      "email": "johndoe@andela.com",
                      "id": 1,
                      "name": "John Doe",
                    },
                  ],
                  "error": null,
                  "loading": false,
                }
              }
            />,
            "_firstWorkInProgressHook": null,
            "_forcedUpdate": false,
            "_instance": [Circular],
            "_isReRender": false,
            "_newState": null,
            "_numberOfReRenders": 0,
            "_renderPhaseUpdates": null,
            "_rendered": <GenericModal
              footer={null}
              handleClose={[Function]}
              handleSubmit={[Function]}
              id="addManagerModal"
              submitLoading={false}
              success={false}
              successMessage="This team manager has been added to the project form!"
              title="Add Team Manager"
            >
              <React.Fragment>
                <TextInput
                  alertText=""
                  className="wt-text-input"
                  comment=""
                  componentStateKey="inputs"
                  defaultStatus={0}
                  inputValue=""
                  label="Name"
                  length={999}
                  name="managerName"
                  parent={[Circular]}
                  placeholder=""
                  testInput={[Function]}
                  type="text"
                />
                <TextInput
                  alertText=""
                  className="wt-text-input"
                  comment=""
                  componentStateKey="inputs"
                  defaultStatus={0}
                  inputValue=""
                  label="Email"
                  length={999}
                  name="managerEmail"
                  parent={[Circular]}
                  placeholder=""
                  testInput={[Function]}
                  type="text"
                />
              </React.Fragment>
            </GenericModal>,
            "_rendering": false,
            "_updater": [Circular],
            "_workInProgressHook": null,
          },
        },
      }
    }
    placeholder=""
    testInput={[Function]}
    type="text"
  />
</GenericModal>
`;
