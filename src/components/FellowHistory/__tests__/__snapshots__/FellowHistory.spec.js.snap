// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fellow History Container renders to match shapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FellowHistory
    averageRatings={
        Object {
            "communication": "0.00",
            "initiative": "0.33",
            "integration": "0.00",
            "professionalism": "0.00",
            "quality": "0.1",
            "quantity": "0.41",
          }
    }
    fellowSummaryDetails={
        Array [
            Object {
              "email": "kingsley.obot@andela.com",
              "id": 10,
              "picture": null,
              "project": "Watch Tower",
              "user": Object {
                "firstName": "Kingsley",
                "lastName": "Obot",
              },
            },
          ]
    }
    getFellowDevPulse={[Function]}
    getLmsSubmissions={[Function]}
    history={
        Object {
            "push": [Function],
          }
    }
    lmsLoading={false}
    lmsSubmissions={Object {}}
    match={
        Object {
            "params": Object {
              "name": "kingsley.obot",
            },
          }
    }
    ratings={
        Array [
            Object {},
          ]
    }
    ratingsLoading={false}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Route
          path="/developers/pip/activation/:name"
          render={[Function]}
/>,
        <Route
          path="/developers/:name"
          render={[Function]}
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "path": "/developers/pip/activation/:name",
          "render": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "path": "/developers/:name",
          "render": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Route
            path="/developers/pip/activation/:name"
            render={[Function]}
/>,
          <Route
            path="/developers/:name"
            render={[Function]}
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "path": "/developers/pip/activation/:name",
            "render": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "path": "/developers/:name",
            "render": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
