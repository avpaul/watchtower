// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders to match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FellowChartContainer
    countSummary={
        Object {
            "D0A Simulations": Object {
              "Week 1": Object {
                "offTrack": 12,
                "onPip": 0,
                "onTrack": 33,
              },
              "Week 2": Object {
                "offTrack": 16,
                "onPip": 0,
                "onTrack": 29,
              },
              "Week 3": Object {
                "offTrack": 5,
                "onPip": 0,
                "onTrack": 40,
              },
              "Week 4": Object {
                "offTrack": 7,
                "onPip": 0,
                "onTrack": 38,
              },
              "Week 5": Object {
                "offTrack": 7,
                "onPip": 0,
                "onTrack": 38,
              },
              "Week 6": Object {
                "offTrack": 10,
                "onPip": 0,
                "onTrack": 35,
              },
              "Week 7": Object {
                "offTrack": 11,
                "onPip": 0,
                "onTrack": 34,
              },
              "Week 8": Object {
                "offTrack": 14,
                "onPip": 0,
                "onTrack": 31,
              },
            },
            "D0B Apprenticeship": Object {
              "Week 1": Object {
                "offTrack": 9,
                "onPip": 0,
                "onTrack": 31,
              },
              "Week 10": Object {
                "offTrack": 0,
                "onPip": 0,
                "onTrack": 10,
              },
              "Week 11": Object {
                "offTrack": 0,
                "onPip": 0,
                "onTrack": 5,
              },
              "Week 12": Object {
                "offTrack": 4,
                "onPip": 0,
                "onTrack": 1,
              },
              "Week 2": Object {
                "offTrack": 12,
                "onPip": 0,
                "onTrack": 28,
              },
              "Week 3": Object {
                "offTrack": 13,
                "onPip": 0,
                "onTrack": 27,
              },
              "Week 4": Object {
                "offTrack": 9,
                "onPip": 0,
                "onTrack": 26,
              },
              "Week 5": Object {
                "offTrack": 11,
                "onPip": 0,
                "onTrack": 19,
              },
              "Week 6": Object {
                "offTrack": 9,
                "onPip": 0,
                "onTrack": 16,
              },
              "Week 7": Object {
                "offTrack": 5,
                "onPip": 0,
                "onTrack": 15,
              },
              "Week 8": Object {
                "offTrack": 5,
                "onPip": 0,
                "onTrack": 10,
              },
              "Week 9": Object {
                "offTrack": 2,
                "onPip": 0,
                "onTrack": 13,
              },
            },
          }
    }
    data={
        Array [
            Object {
              "Total": 20,
            },
          ]
    }
    fellowChartTooltipClass={
        Object {
            "--fellow-chart-tooltip": "13%",
          }
    }
    filter="ALL"
    getFellowCountHistory={[Function]}
    handleChartClose={[Function]}
    loading={false}
    updateSelected={[Function]}
    user={
        Object {
            "name": "Test User",
            "picture": "http://",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <FellowChart
        fellowChartTooltip={
                Object {
                        "--fellow-chart-tooltip": "13%",
                      }
        }
        fellowsCount={
                Array [
                        undefined,
                      ]
        }
        handleChartClose={[Function]}
        radioCardOptions={
                Array [
                        Object {
                          "name": "ALL Today",
                          "value": "Trend",
                        },
                      ]
        }
        updateSelected={[Function]}
        user={
                Object {
                        "name": "Test User",
                        "picture": "http://",
                      }
        }
/>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "fellowChartTooltip": Object {
          "--fellow-chart-tooltip": "13%",
        },
        "fellowsCount": Array [
          undefined,
        ],
        "handleChartClose": [Function],
        "radioCardOptions": Array [
          Object {
            "name": "ALL Today",
            "value": "Trend",
          },
        ],
        "updateSelected": [Function],
        "user": Object {
          "name": "Test User",
          "picture": "http://",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <FellowChart
          fellowChartTooltip={
                    Object {
                              "--fellow-chart-tooltip": "13%",
                            }
          }
          fellowsCount={
                    Array [
                              undefined,
                            ]
          }
          handleChartClose={[Function]}
          radioCardOptions={
                    Array [
                              Object {
                                "name": "ALL Today",
                                "value": "Trend",
                              },
                            ]
          }
          updateSelected={[Function]}
          user={
                    Object {
                              "name": "Test User",
                              "picture": "http://",
                            }
          }
/>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "fellowChartTooltip": Object {
            "--fellow-chart-tooltip": "13%",
          },
          "fellowsCount": Array [
            undefined,
          ],
          "handleChartClose": [Function],
          "radioCardOptions": Array [
            Object {
              "name": "ALL Today",
              "value": "Trend",
            },
          ],
          "updateSelected": [Function],
          "user": Object {
            "name": "Test User",
            "picture": "http://",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`renders to match snapshot when loading 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FellowChartContainer
    countSummary={Object {}}
    data={
        Array [
            Object {
              "Total": 20,
            },
          ]
    }
    fellowChartTooltipClass={
        Object {
            "--fellow-chart-tooltip": "13%",
          }
    }
    filter="ALL"
    getFellowCountHistory={[Function]}
    handleChartClose={[Function]}
    loading={true}
    updateSelected={[Function]}
    user={
        Object {
            "name": "Test User",
            "picture": "http://",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Loader
        size=""
/>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "size": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Loader
          size=""
/>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "size": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
