// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders to match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RadioCard
    count={40}
    current="All"
    handleRadioClick={[Function]}
    name="All"
    value="All"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <label
        className="form-check-label"
        htmlFor="line-chart-All"
>
        <input
                checked={true}
                className="radio-card__input form-check-input"
                id="line-chart-All"
                onChange={[Function]}
                type="radio"
                value="All"
        />
        All - 40
</label>,
      "className": "radio-card form-check form-check-inline",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            checked={true}
            className="radio-card__input form-check-input"
            id="line-chart-All"
            onChange={[Function]}
            type="radio"
            value="All"
/>,
          "All - 40",
        ],
        "className": "form-check-label",
        "htmlFor": "line-chart-All",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "checked": true,
            "className": "radio-card__input form-check-input",
            "id": "line-chart-All",
            "onChange": [Function],
            "type": "radio",
            "value": "All",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "All - 40",
      ],
      "type": "label",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <label
          className="form-check-label"
          htmlFor="line-chart-All"
>
          <input
                    checked={true}
                    className="radio-card__input form-check-input"
                    id="line-chart-All"
                    onChange={[Function]}
                    type="radio"
                    value="All"
          />
          All - 40
</label>,
        "className": "radio-card form-check form-check-inline",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <input
              checked={true}
              className="radio-card__input form-check-input"
              id="line-chart-All"
              onChange={[Function]}
              type="radio"
              value="All"
/>,
            "All - 40",
          ],
          "className": "form-check-label",
          "htmlFor": "line-chart-All",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "checked": true,
              "className": "radio-card__input form-check-input",
              "id": "line-chart-All",
              "onChange": [Function],
              "type": "radio",
              "value": "All",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "All - 40",
        ],
        "type": "label",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
