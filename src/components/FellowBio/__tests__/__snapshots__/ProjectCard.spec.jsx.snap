// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests the project card renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProjectCard
    Id="1"
    data={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="my-project row"
>
          MY PROJECT
</div>,
        <div
          className="card-project"
          id="1"
          role="button"
          tabIndex="0"
>
          <RenderItem
                    title="Project Name"
          />
          <RenderItem
                    title="LF"
          />
          <RenderItem
                    title="PM"
          >
                    --
          </RenderItem>
</div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "MY PROJECT",
          "className": "my-project row",
        },
        "ref": null,
        "rendered": "MY PROJECT",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <RenderItem
              title="Project Name"
/>,
            <RenderItem
              title="LF"
/>,
            <RenderItem
              title="PM"
>
              --
</RenderItem>,
          ],
          "className": "card-project",
          "id": "1",
          "role": "button",
          "tabIndex": "0",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": undefined,
              "title": "Project Name",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": undefined,
              "title": "LF",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": "--",
              "title": "PM",
            },
            "ref": null,
            "rendered": "--",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="my-project row"
>
            MY PROJECT
</div>,
          <div
            className="card-project"
            id="1"
            role="button"
            tabIndex="0"
>
            <RenderItem
                        title="Project Name"
            />
            <RenderItem
                        title="LF"
            />
            <RenderItem
                        title="PM"
            >
                        --
            </RenderItem>
</div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "MY PROJECT",
            "className": "my-project row",
          },
          "ref": null,
          "rendered": "MY PROJECT",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <RenderItem
                title="Project Name"
/>,
              <RenderItem
                title="LF"
/>,
              <RenderItem
                title="PM"
>
                --
</RenderItem>,
            ],
            "className": "card-project",
            "id": "1",
            "role": "button",
            "tabIndex": "0",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": undefined,
                "title": "Project Name",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": undefined,
                "title": "LF",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": "--",
                "title": "PM",
              },
              "ref": null,
              "rendered": "--",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
